 /*
		 Project Name: Blackjack
		 Author: Shannon Mong
		 GitHub: Feldariia
		 Description: Week 1 for SCS 290
		 Last Modified: 23Aug2020
		 Version: 1.0
		 */

import java.util.*;
import java.util.Vector;

public class Blackjack {

	    private static Scanner scanner = new Scanner(System.in);
	    private int[] deck;   // An array of 52 cards for the deck (hope I did these arrays right ; _ ;).
	    private int currentPosition; // Current position in the deck
	    private Vector hand;   // The cards in the hand.

	    public static void main(String[] args)
	    {
	        new Blackjack().run();
	    }

	    public void run()
	    {
	    	//Declare variables. Money: Amount of money the player has. Bet: Amount the player can bet on
	    	// in a game. userFinish: did the player win or no?
	        int money;          
	        int bet;            
	        boolean userFinish;   

	        System.out.print("Welcome to the game of blackjack.");
	

	        money = 100;  // User starts with $100.

	        //Allowing the user to bet. If the player selects 0, they have no more money left and will end the game
	        while (true)
	        {
	            System.out.println("You have " + money + " dollars.");
	            do
	            {
	                System.out.println("How many dollars do you want to bet?  (Enter 0 to end.)");
	                System.out.print("? ");
	                bet = scanner.nextInt();
	                if (bet < 0 || bet > money)
	                {
	                    System.out.print("Your input must be between 0 and " + money + '.');
	                }
	            } while (bet < 0 || bet > money);
	            if (bet == 0)
	            {
	                break;
	            }
	            userFinish = playBlackjack();
	            if (userFinish)
	            {
	                money = money + bet;
	            } else
	            {
	                money = money - bet;
	            }
	            System.out.println();
	            if (money == 0)
	            {
	                System.out.print("Ouch! You have no money left");
	                break;
	            }
	        }

	        System.out.print("You walk out with $" + money + '.');

	    } 

	    private boolean playBlackjack()
	    {
	        // Let the user play one game of Blackjack.
	        // Return true if the user wins, false if the user lost the game.

	    	//Instead of an ArrayList, I wanted to try a Vector class.
	    	
	        Vector dealerHand;   // The dealer's hand.
	        Vector userHand;     // The user's hand.

	        // Create a deck of cards.
	        deck = new int[52];
	        int cardCount = 0; // How many cards have been created so far.
	        for (int suit = 0; suit <= 3; suit++)
	        {
	            for (int value = 1; value <= 13; value++)
	            {
	                deck[cardCount] = value;
	                cardCount++;
	            }
	        }
	        currentPosition = 0;

	        //I did not know exactly how to use Vector (stack overflow recommended it to me),
	        //So I had to base it off of the code I was reading with the Vector Class instead of an ArrayList. Sorry!
	        //Just wanted to try something new
	        
	        dealerHand = new Vector();
	        userHand = new Vector();

	        // Shuffle the deck, then deal two cards to each player in the game.

	        shuffle();

	        dealerHand.addElement(dealCard());
	        dealerHand.addElement(dealCard());
	        userHand.addElement(dealCard());
	        userHand.addElement(dealCard());

	        System.out.println();
	        System.out.println();

	        //Basically checking to see if one of the players has 21. If they do, they win. 

	        if (value(dealerHand) == 21)
	        {
	            System.out.println("Dealer has the " + showCard(getCard(dealerHand, 0)) + " and the " + showCard(getCard(dealerHand, 1)) + ".");
	            System.out.println("User has the " + showCard(getCard(userHand, 0)) + " and the " + showCard(getCard(userHand, 1)) + ".");
	            System.out.println();
	            System.out.println("Dealer has Blackjack.  Dealer wins.");
	            return false;
	        }

	        if (value(userHand) == 21)
	        {
	            System.out.println("Dealer has the " + showCard(getCard(dealerHand, 0)) + " and the " + showCard(getCard(dealerHand, 1)) + ".");
	            System.out.println("User has the " + showCard(getCard(userHand, 0)) + " and the " + showCard(getCard(userHand, 1)) + ".");
	            System.out.println();
	            System.out.println("You have Blackjack.  You win.");
	            return true;
	        }

	       //  If neither player has Blackjack, play the game.  The user gets a chance
	       // to hit on their cards or they can choose to stand if they are too close to 21.

	        while (true)
	        {

	         //Show the player's cards, giving them the option to hit or stand

	            System.out.println("Your cards are:");
	            for (int i = 0; i < userHand.size(); i++)
	            {
	                System.out.println("    " + showCard(getCard(userHand, i)));
	            }
	            System.out.println("Your total is " + value(userHand));
	            System.out.println();
	            System.out.println("Dealer has " + showCard(getCard(dealerHand, 0)));
	            System.out.println();
	            System.out.print("Would you like to Hit (H) or Stand (S)? ");
	            char userAction;  // Player's response, 'H' or 'S'.
	            do
	            {
	                userAction = Character.toUpperCase(scanner.next().charAt(0));
	                if (userAction != 'H' && userAction != 'S')
	                {
	                    System.out.print("Hey wait! Would you like to hit (H) or stand (S)?:  ");
	                }
	            } while (userAction != 'H' && userAction != 'S');

	           //Player hits, random card is given out. If player stands, the dealer has the chance to draw a card

	            if (userAction == 'S')
	            {
	                //Player stands from taking cards
	                break;
	            } else
	            { 
	               // Give the player a card.  If the player goes over 21 (busts), the player loses.
	                int newCard = dealCard();
	                userHand.addElement(newCard);
	                System.out.println("Player hits.");
	                System.out.println("Your card is the " + showCard(newCard));
	                System.out.println("Your total is now " + value(userHand));
	                if (value(userHand) > 21)
	                {
	                    System.out.println();
	                    System.out.println("Ouch man! You busted! RIP");
	                    System.out.println("Dealer's other card was the " + showCard(getCard(dealerHand, 1)));
	                    return false;
	                }
	            }

	        } 

	        //Comes in when the player chose to stand with less than 21. The dealer will get another card
	        //If they have less than a total of 16

	        
	        System.out.println("User stands.");
	        System.out.println("Dealer's cards are");
	        System.out.println("    " + showCard(getCard(dealerHand, 0)));
	        System.out.println("    " + showCard(getCard(dealerHand, 1)));
	        while (value(dealerHand) <= 16)
	        {
	            int newCard = dealCard();
	            System.out.println("Dealer hits and gets the " + showCard(newCard));
	            dealerHand.addElement(newCard);
	        }
	        System.out.println("Dealer's total is " + value(dealerHand));

	        //Find the winner

	        System.out.println();
	        if (value(dealerHand) > 21)
	        {
	            System.out.println("Dealer busted by going over 21.  You win.");
	            return true;
	        } else
	        {
	            if (value(dealerHand) == value(userHand))
	            {
	                System.out.println("Dealer wins on a tie.  You lose.");
	                return false;
	            } else
	            {
	                if (value(dealerHand) > value(userHand))
	                {
	                    System.out.println("Dealer wins, " + value(dealerHand) + " points to " + value(userHand) + ".");
	                    return false;
	                } else
	                {
	                    System.out.println("You win, " + value(userHand) + " points to " + value(dealerHand) + ".");
	                    return true;
	                }
	            }
	        }

	    }  

	    public int dealCard()
	    {
	        // Deals one card from the deck and returns it.
	        if (currentPosition == 52)
	        {
	            shuffle();
	        }
	        currentPosition++;
	        return deck[currentPosition - 1];
	    }

	    public void shuffle()
	    {
	        // Put all the used cards back into the deck, and shuffle it into
	        // a random order.
	        for (int i = 51; i > 0; i--)
	        {
	            int rand = (int) (Math.random() * (i + 1));
	            int temp = deck[i];
	            deck[i] = deck[rand];
	            deck[rand] = temp;
	        }
	        currentPosition = 0;
	    }

	    public int getCard(Vector hand, int position)
	    {
	        // Get the card from the hand in given position, where positions
	        // are numbered starting from 0.  If the specified position is
	        // not the position number of a card in the hand, then null
	        // is returned.
	        if (position >= 0 && position < hand.size())
	        {
	            return ((Integer)hand.elementAt(position)).intValue();
	        } else
	        {
	            return 0;
	        }
	    }

	    public int value(Vector hand)
	    {
	        // Returns the value of this hand for the
	        // game of Blackjack.

	        int value;      // The value computed for the hand.
	        boolean ace;  // This will be set to true if the
	        //   hand contains an ace.
	        int cards;    // Number of cards in the hand.

	        value = 0;
	        ace = false;
	        cards = hand.size();

	        for (int i = 0; i < cards; i++)
	        {
	            // Add the value of the i-th card in the hand.
	            int card;    // The i-th card;
	            int cardVal;  // The blackjack value of the i-th card.
	            card = getCard(hand, i);
	            cardVal = getValue(card);  // The normal value, 1 to 13.
	            if (cardVal > 10)
	            {
	                cardVal = 10;   // For a Jack, Queen, or King.
	            }
	            if (cardVal == 1)
	            {
	                ace = true;     // There is at least one ace.
	            }
	            value = value + cardVal;
	        }

	        if (ace == true && value + 10 <= 21)
	        {
	            value = value + 10;
	        }

	        return value;

	    }
	    public int getValue(int card)
	    {
	        int result = card;
	        switch (card)
	        {
	            case 11:
	            case 12:
	            case 13:
	                result =  10;
	        }
	        return result;
	    }
	    public String showCard(int card)
	    {
	        switch (card)
	        {
	            case 1:
	                return "Ace";
	            case 2:
	                return "2";
	            case 3:
	                return "3";
	            case 4:
	                return "4";
	            case 5:
	                return "5";
	            case 6:
	                return "6";
	            case 7:
	                return "7";
	            case 8:
	                return "8";
	            case 9:
	                return "9";
	            case 10:
	                return "10";
	            case 11:
	                return "Jack";
	            case 12:
	                return "Queen";
	            case 13:
	                return "King";
	            default:
	                return "?";
	        }
	    }
	}  
